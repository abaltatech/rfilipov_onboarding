package com.example.myapplication;

import static android.content.ContentValues.TAG;
import static com.abaltatech.mcs.logger.MCSLogger.ELogType.eDebug;
import static com.abaltatech.mcs.logger.MCSLogger.ELogType.eError;
import static com.abaltatech.mcs.logger.MCSLogger.ELogType.eInfo;
import static com.abaltatech.mcs.logger.MCSLogger.ELogType.eWarning;

import android.content.Context;
import android.graphics.Point;
import android.os.Bundle;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;

import com.abaltatech.mcs.connectionmanager.PeerDevice;
import com.abaltatech.mcs.logger.MCSLogger;
import com.abaltatech.mcs.logger.android.LoggerAndroid;
import com.abaltatech.weblink.core.WLClientFeatures;
import com.abaltatech.weblinkclient.WebLinkClientCore;


import java.util.Locale;

public class MainActivity extends AppCompatActivity {


    public void onCreate(Bundle savedInstance) {
        super.onCreate(savedInstance);
        //setContentView(R.layout.activity_main);

        final WebLinkClientCore wlClient
                = WLApplication.getInstance().getWebLinkClientCore();

        WindowManager windowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);
        Display display = windowManager.getDefaultDisplay();
        Point clientSize = new Point();
        display.getSize(clientSize);

        // Sets the resolution of the video, generated by the WebLink Host.
        // This is also the resolution that the decoder on the client side
        // will use.
        int encodeWidth = 800;
        int encodeHeight = 480;

        // Sets the resolution at which WebLink applications are rendered before
        // being encoded into video.
        int renderWidth = encodeWidth;
        int renderHeight = encodeHeight;

        // Sets the client dimensions
        int clientWidth = encodeWidth;
        int clientHeight = encodeHeight;

        // Set the Client Display's DPI
        DisplayMetrics metrics = getResources().getDisplayMetrics();
        int xdpi = (int) metrics.xdpi;
        int ydpi = (int) metrics.ydpi;

        int clientFeatures = WLClientFeatures.SUPPORTS_CLIENT_ACTIONS;
        String clientFeaturesString = String.format(
                Locale.US, "xdpi=%d|ydpi=%d", xdpi, ydpi);

        wlClient.init(
                renderWidth, renderHeight,
                encodeWidth, encodeHeight,
                clientWidth, clientHeight,
                clientFeatures, clientFeaturesString
        );

        String Address = "10.40.3.54:12345";
        PeerDevice device = new PeerDevice("Alice", "Socket", Address);
        WebLinkClient client = WLApplication.getInstance().getWebLinkClient();
        wlClient.setPeriodicPingParams(5000, 15000);

        boolean result = client.onConnectionAttempt(device);
        if (result) {
            MCSLogger.log(eInfo, TAG, "***************Connection established**************");
            Toast.makeText(MainActivity.this, "Connection established", Toast.LENGTH_SHORT).show();

        } else {
            MCSLogger.log(eInfo, TAG, "***************Connection failed to be established!**************");
            Toast.makeText(MainActivity.this, "Connection failed to be established", Toast.LENGTH_SHORT).show();
        }
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            // Handle the exception
            Thread.currentThread().interrupt();
        }

        boolean flag = client.isConnected();
        while(flag)
        {
            Toast.makeText(MainActivity.this, "Connection still running", Toast.LENGTH_SHORT).show();
            flag = client.isConnected();

            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                // Handle the exception
                Thread.currentThread().interrupt();
            }

        }

        Toast.makeText(MainActivity.this, "Connection has stopped", Toast.LENGTH_SHORT).show();
        MCSLogger.log(eInfo, TAG, "***************Connection has stopped!**************");

    }
}
