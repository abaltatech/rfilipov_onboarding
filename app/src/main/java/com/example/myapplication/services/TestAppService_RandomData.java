/****************************************************************************
 *
 * @file TestAppService_RandomData.java
 * @brief
 *
 * Contains the TestAppService_RandomData class.
 *
 * @author Abalta Technologies, Inc.
 * @date Oct, 2022
 *
 * @cond Copyright
 *
 * COPYRIGHT 2022 ABALTA TECHNOLOGIES ALL RIGHTS RESERVED.<br>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @endcond
 *****************************************************************************/
package com.example.myapplication.services;

import com.abaltatech.mcs.logger.MCSLogger;
import com.abaltatech.wlappservices.EServiceErrorCode;
import com.abaltatech.wlappservices.IServiceHandler;
import com.abaltatech.wlappservices.IServiceNotificationHandler;
import com.abaltatech.wlappservices.IServiceResponseNotification;
import com.abaltatech.wlappservices.ServiceRequest;
import com.abaltatech.wlappservices.ServiceResponse;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class TestAppService_RandomData implements IServiceHandler {
    private static final String TAG = "TestAppService_RandomData";
    private static final int MAX_RESPONSE_LENGTH = 1024 * 1024; //1MB
    private static final String RESOURCE_PATH_RANDOM_DATA = "requestData";
    private static final String SERVICE_NAME = "com.abaltatech.weblink.test.randomdata.client";
    private static final String PROTOCOL_NAME = "randomdata";

    int m_requestID = 0;

    /**
     * Processes a given request.
     *
     * @param resourcePath path to the resource for which a request is sent
     * @param request      the actual request object
     * @param notification response receiver
     * @return internal request ID used in other methods such as OnCancelRequest
     */
    @Override
    public synchronized int onProcessRequest(String resourcePath, ServiceRequest request, IServiceResponseNotification notification) {
        ++m_requestID;

        if (resourcePath != null && resourcePath.equals(RESOURCE_PATH_RANDOM_DATA)) {
            onProcessRandomData(m_requestID, request, notification);
        }

        return m_requestID;
    }

    private void onProcessRandomData(final int requestID, final ServiceRequest request, final IServiceResponseNotification notification) {
        // Execute the processing in a separate thread
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                processRandomData(request, notification);
            }
        });
        t.setName("processRandomData_" + requestID);
        t.start();
    }

    /**
     * Parses request body and generates random data response which is sent back.
     *
     * The request data is expected to contain:
     * 1. ID generated by the sender (4 bytes)
     * 2. Requested response length (4 bytes)
     * 3. Arbitrary request payload, its length could be 0.
     *
     * The response data contains:
     * 1. Same ID sent by the sender (4 bytes)
     * 2. Length of the request payload (sent as an acknowledgment back to the request sender)
     * 3. Random numbers payload with length equal to the requested.
     *
     * @param request request to be processed
     * @param notification response receiver
     */
    private void processRandomData(ServiceRequest request, IServiceResponseNotification notification) {
        MCSLogger.log(TAG, "Process random data");
        // Parse the request
        byte[] body = request.getRequestBody();
        if (null == body || body.length < 8) {
            reportError(notification, request, EServiceErrorCode.InvalidArgument, "Invalid request body");
            return;
        }
        int requestLength = body.length - 8; // Exclude the ID and the response length

        // Requested response length is an integer number placed in bytes 4, 5, 6, and 7
        int responseBodyLength = (
                ((body[4] & 0xff) <<  0) |
                ((body[5] & 0xff) <<  8) |
                ((body[6] & 0xff) << 16) |
                ((body[7] & 0xff) << 24));
        if (responseBodyLength < 0 || responseBodyLength > MAX_RESPONSE_LENGTH) {
            reportError(notification, request, EServiceErrorCode.InvalidArgument, "Invalid response body length");
            return;
        }

        // Generate response
        byte[] responseBody = new byte[responseBodyLength + 8];
        Random random = new Random();
        random.nextBytes(responseBody);

        // Copy the ID
        System.arraycopy(body, 0, responseBody, 0, 4);

        // Set the received request length
        responseBody[4] = (byte) ((requestLength >>  0) & 0xff);
        responseBody[5] = (byte) ((requestLength >>  8) & 0xff);
        responseBody[6] = (byte) ((requestLength >> 16) & 0xff);
        responseBody[7] = (byte) ((requestLength >> 24) & 0xff);

        // Send the response
        ServiceResponse response = new ServiceResponse();
        response.setRequestID(request.getRequestID());
        response.setResponseBody(responseBody);
        notification.onResponseReceived(request, response);
    }

    private void reportError(IServiceResponseNotification notification, ServiceRequest request, EServiceErrorCode errorCode, String info) {
        ServiceResponse response = new ServiceResponse();
        response.setRequestID(request.getRequestID());
        response.setResponseBody(info.getBytes());
        notification.onRequestFailed(request, errorCode, response);
    }

    /**
     * Cancels processing of a started request.
     *
     * @param requestID id of request obtained via {@link #onProcessRequest(String, ServiceRequest, IServiceResponseNotification)}
     * @return success status
     */
    @Override
    public boolean onCancelRequest(int requestID) {
        // We execute the requests immediately and we cannot cancel them.
        return false;
    }

    /**
     * Called when a client wants to receive update notification for a given resource path.
     *
     * @param resourcePath path to resource for which to receive notification
     * @param handler      object to receive the notifications
     */
    @Override
    public void registerForNotification(String resourcePath, IServiceNotificationHandler handler) {
        // Do nothing
    }

    /**
     * Unregisters a given notification handler previously registered with {@link #registerForNotification(String, IServiceNotificationHandler)}
     *
     * @param resourcePath path to resource for which to unregister
     * @param handler      the handler to unregister
     */
    @Override
    public void unregisterFromNotification(String resourcePath, IServiceNotificationHandler handler) {
        // Do nothing
    }

    /**
     * Called by the system when all registered notification handlers should be cleared.
     */
    @Override
    public void removeAllNotifications() {
        // Do nothing
    }

    /**
     * Retrieves service name
     *
     * @return
     */
    public String getServiceName() {
        return SERVICE_NAME;
    }

    /**
     * Retrieves supported protocols
     *
     * @return
     */
    public List<String> getServiceProtocols() {
        List<String> protocols = new ArrayList<String>();
        protocols.add(PROTOCOL_NAME);
        return protocols;
    }
}
